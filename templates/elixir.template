{% set is_empty = comments or package or comments or docker_image -%}
{% if comments -%}
# List the dependencies for your flake
# to update the dependencies run `nix flake update`
{% endif -%}
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };
  outputs =
    {
      nixpkgs,
      flake-utils,
      ...
    }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
        };
        {% if package or docker_image -%}
        pname = "elixir-app"; # Default package name
        version = "0.1.0"; # Default version
        src = ./.; # Assume project source is in the flake root
        
        {% if comments -%}
        # Define Elixir/Erlang versions
        {% endif -%}
        erlangVersion = pkgs.erlangR26; # Choose your Erlang version
        elixirVersion = pkgs.elixir_1_16; # Choose your Elixir version
        
        {% if comments -%}
        # Define build options
        {% endif -%}
        # Mix environment
        mixEnv = "prod"; # Options: "dev", "test", "prod"
        
        # Phoenix-specific options (if using Phoenix)
        isPhoenix = false; # Set to true for Phoenix applications
        {% endif -%}

        {% if package -%}
        {% if comments -%}
        # Define your Elixir application package
        # This creates a Nix package from your Elixir project
        {% endif -%}
        package = pkgs.stdenv.mkDerivation {
          inherit pname version src;

          {% if comments -%}
          # Build dependencies
          {% endif -%}
          buildInputs = [
            erlangVersion
            elixirVersion
            {% if comments -%}
            # Add any additional build dependencies
            # pkgs.postgresql # If needed for tests
            # pkgs.nodejs # If using Phoenix with asset compilation
            {% endif -%}
          ];

          {% if comments -%}
          # Environment variables for the build
          {% endif -%}
          MIX_ENV = mixEnv;
          MIX_REBAR3 = "${pkgs.rebar3}/bin/rebar3";
          
          {% if comments -%}
          # The build phase fetches dependencies and compiles the application
          {% endif -%}
          buildPhase = ''
            export HOME=$TMPDIR
            mix local.hex --force
            mix local.rebar --force
            mix deps.get --only=${mixEnv}
            mix compile
            ${if isPhoenix then "
            # For Phoenix applications with assets
            cd assets
            npm install
            npm run deploy
            cd ..
            mix phx.digest
            " else ""}
            mix release
          '';

          {% if comments -%}
          # The install phase copies the release to the Nix store
          {% endif -%}
          installPhase = ''
            mkdir -p $out
            cp -r _build/${mixEnv}/rel/${pname}/* $out/
            
            # Create a wrapper script
            mkdir -p $out/bin
            cat > $out/bin/${pname} << EOF
            #!/bin/sh
            exec $out/bin/${pname} "\$@"
            EOF
            chmod +x $out/bin/${pname}
          '';
        };
        {% endif -%}

        {% if docker_image -%}
        {% if comments -%}
        # Define the Docker image for your Elixir application
        # This creates a container optimized for running Elixir/Erlang applications
        {% endif -%}
        dockerImage = pkgs.dockerTools.buildLayeredImage {
          name = pname;
          tag = version;

          {% if comments -%}
          # Contents of the image
          # This includes your built Elixir release and minimal runtime dependencies
          {% endif -%}
          contents = [
            package # Include your built Elixir release
            {% if comments -%}
            # Essential utilities for a functional container
            pkgs.bash # For shell scripts
            pkgs.coreutils # Basic Linux utilities
            
            # Include CA certificates if your app makes HTTPS connections
            pkgs.cacert
            {% endif -%}
          ];

          {% if comments -%}
          # The entrypoint for your Docker container
          {% endif -%}
          entrypoint = [ "${package}/bin/${pname}" "start" ];

          {% if comments -%}
          # Configuration for the container
          {% endif -%}
          config = {
            {% if comments -%}
            # Environment variables
            {% endif -%}
            Env = [ 
              "LANG=C.UTF-8"
              "RELEASE_DISTRIBUTION=name"
              {% if comments -%}
              # "PORT=4000" # For Phoenix applications
              # "DATABASE_URL=ecto://user:pass@host/database"
              # "SECRET_KEY_BASE=your_production_key"
              {% endif -%}
            ];
            
            {% if comments -%}
            # Exposed ports - common for web services
            {% endif -%}
            ExposedPorts = { 
              {% if comments -%}
              # "4000/tcp" = {}; # Default Phoenix port
              # "8080/tcp" = {}; # Alternative port
              {% endif -%}
            };
            
            {% if comments -%}
            # Working directory inside the container
            {% endif -%}
            WorkingDir = "/";
            
            {% if comments -%}
            # User to run as (for security, avoid running as root)
            # User = "nobody";
            {% endif -%}
          };
        };
        {% endif -%}

      in
      {
        {% if dev -%}
        {% if comments -%}
        # Development shell with Elixir and Erlang tools
        # This provides a comprehensive environment for Elixir development
        {% endif -%}
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Erlang and Elixir
            erlangVersion
            elixirVersion
            rebar3 # Erlang build tool
            
            # Elixir development tools
            elixir-ls # Language server for IDE integration
            
            # Build tools
            gnumake
            
            # Database tools (if needed)
            {% if comments -%}
            # postgresql # If your app uses PostgreSQL
            {% endif -%}
            
            # Node.js (for Phoenix assets)
            {% if comments -%}
            # nodejs # Uncomment if using Phoenix with asset compilation
            # nodePackages.npm
            {% endif -%}
            
            # Nix tools
            nil # Nix Language Server
            nixfmt-rfc-style # Nix formatter
            
            {% if comments -%}
            # Optional tools based on your workflow
            # inotify-tools # For file system events (used by Phoenix live reload)
            # docker # For container development
            # docker-compose # For multi-container setups
            {% endif -%}
          ];
          
          {% if comments -%}
          # Shell hook to set up the environment
          # shellHook = ''
          #   # Set up local Hex and rebar
          #   mix local.hex --force
          #   mix local.rebar --force
          #   
          #   # Set environment variables
          #   export MIX_HOME=$PWD/.nix-mix
          #   export HEX_HOME=$PWD/.nix-hex
          #   export ERL_LIBS=""
          #   export RELEASE_COOKIE=development_cookie
          #   
          #   # For Phoenix projects
          #   # export PHX_SERVER=true
          #   
          #   echo "Elixir $(elixir -v | grep Elixir | cut -d ' ' -f 2) on Erlang/OTP $(erl -noshell -eval 'io:fwrite(\"~s\", [erlang:system_info(otp_release)])' -s init stop)"
          # '';
          {% endif -%}
        };
        {% endif -%}

        {% if package -%}
        packages.default = package;
        {% endif -%}

        {% if docker_image -%}
        packages.dockerImage = dockerImage;
        apps.docker-build-and-load = flake-utils.lib.mkApp {
          drv = pkgs.writeScript "docker-build-and-load" ''
            #!/bin/sh
            set -euo pipefail
            echo "Building and loading Docker image..."
            nix build .#dockerImage
            docker load < result
            echo "Docker image '${pname}:${version}' loaded."
          '';
        };
        {% endif -%}
      }
    );
}
