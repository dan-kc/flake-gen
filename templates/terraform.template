{% set is_empty = comments or package or comments or docker_image -%}
{% if comments -%}
# List the dependencies for your flake
# to update the dependencies run `nix flake update`
{% endif -%}
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    {% if comments -%}
    # Optional: Use a specific OpenTofu version from source
    # opentofu-source = {
    #   url = "github:opentofu/opentofu";
    #   flake = false; # Not a flake, just the source
    # };
    
    # Optional: Use terragrunt for managing multiple Terraform configurations
    # terragrunt-source = {
    #   url = "github:gruntwork-io/terragrunt";
    #   flake = false;
    # };
    {% endif -%}
  };
  outputs =
    {
      nixpkgs,
      flake-utils,
      {% if comments -%}
      # Optional: Include inputs if you're using them
      # opentofu-source,
      # terragrunt-source,
      {% endif -%}
      ...
    }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
          {% if comments -%}
          # Optional: Add overlays for custom versions of tools
          # overlays = [
          #   # Example overlay for building OpenTofu from source
          #   (final: prev: {
          #     opentofu = prev.buildGoModule {
          #       pname = "opentofu";
          #       version = "1.6.0"; # Specify the version you want
          #       src = opentofu-source;
          #       vendorHash = null; # Set to null for first build to get the correct hash
          #     };
          #   })
          # ];
          {% endif -%}
        };
        {% if package or docker_image -%}
        {% if comments -%}
        # Configuration for Terraform/OpenTofu project
        {% endif -%}
        # Choose between Terraform and OpenTofu
        tfProvider = "opentofu"; # Options: "terraform" or "opentofu"
        
        # Get the executable based on the provider choice
        tfTool = if tfProvider == "terraform" then pkgs.terraform else pkgs.opentofu;
        
        # Project metadata
        pname = "terraform-config";
        version = "0.1.0";
        src = ./.; # Assume configuration is in the flake root
        
        {% if comments -%}
        # Choose your cloud provider(s)
        # This affects which CLI tools are included in the dev shell and Docker image
        {% endif -%}
        cloudProviders = [
          {% if comments -%}
          # Uncomment the providers you're using
          # "aws"
          # "azure"
          # "google"
          # "digitalocean"
          # "kubernetes"
          {% endif -%}
        ];
        
        {% if comments -%}
        # Get the appropriate cloud CLI tools based on selected providers
        {% endif -%}
        cloudCLIs = with pkgs; 
          (if builtins.elem "aws" cloudProviders then [ awscli2 ] else []) ++
          (if builtins.elem "azure" cloudProviders then [ azure-cli ] else []) ++
          (if builtins.elem "google" cloudProviders then [ google-cloud-sdk ] else []) ++
          (if builtins.elem "digitalocean" cloudProviders then [ doctl ] else []) ++
          (if builtins.elem "kubernetes" cloudProviders then [ kubectl kubernetes-helm ] else []);
        {% endif -%}

        {% if package %}
        {% if comments -%}
        # Define a package that bundles your Terraform/OpenTofu configuration
        # This is useful for packaging your IaC code for deployment
        {% endif -%}
        package = pkgs.stdenv.mkDerivation {
          inherit pname version src;

          {% if comments -%}
          # No build needed for Terraform configurations - just package the files
          {% endif -%}
          dontBuild = true;
          
          {% if comments -%}
          # Install phase copies the configuration files to the Nix store
          {% endif -%}
          installPhase = ''
            # Create the output directory
            mkdir -p $out
            
            # Copy configuration files
            cp -r $src/* $out/
            
            {% if comments -%}
            # Create a wrapper script for easy execution
            # This provides a convenient way to run terraform/opentofu commands
            {% endif -%}
            mkdir -p $out/bin
            cat > $out/bin/${pname} << EOF
            #!/bin/sh
            set -e
            
            # Change to the directory containing the Terraform files
            cd $out
            
            # Run the terraform/opentofu command
            exec ${tfTool}/bin/${tfProvider} "\$@"
            EOF
            
            chmod +x $out/bin/${pname}
            
            {% if comments -%}
            # Optionally generate documentation
            # if command -v terraform-docs >/dev/null 2>&1; then
            #   terraform-docs markdown $out > $out/README.md
            # fi
            {% endif -%}
          '';
        };
        {% endif -%}

        {% if docker_image %}
        {% if comments -%}
        # Define a Docker image for running your Terraform/OpenTofu configuration
        # This creates a container with all necessary tools to apply your infrastructure
        {% endif -%}
        dockerImage = pkgs.dockerTools.buildLayeredImage {
          name = "${tfProvider}-runner";
          tag = version;

          {% if comments -%}
          # Contents of the image
          # This includes the Terraform/OpenTofu tool, your configuration, and cloud CLIs
          {% endif -%}
          contents = [
            # Include the appropriate Terraform tool
            tfTool
            
            # Include your packaged configuration
            package
            
            # Essential tools for a usable container
            pkgs.bashInteractive
            pkgs.coreutils
            pkgs.gnugrep
            pkgs.gnused
            pkgs.jq
            
            # Include cloud provider CLIs as needed
          ] ++ cloudCLIs;

          {% if comments -%}
          # The entrypoint for the Docker container
          # You can choose between an interactive shell or direct execution of a command
          {% endif -%}
          entrypoint = [
            {% if comments -%}
            # Option 1: Interactive shell with tools available
            {% endif -%}
            "${pkgs.bashInteractive}/bin/bash"
            
            {% if comments -%}
            # Option 2: Direct execution of terraform/opentofu command
            # "${tfTool}/bin/${tfProvider}" "apply" "-auto-approve"
            {% endif -%}
          ];

          {% if comments -%}
          # Container configuration
          {% endif -%}
          config = {
            {% if comments -%}
            # Environment variables
            {% endif -%}
            Env = [
              "TF_IN_AUTOMATION=true"
              {% if comments -%}
              # "TF_LOG=INFO"
              # "AWS_REGION=us-west-2"
              {% endif -%}
            ];
            
            {% if comments -%}
            # Working directory inside the container
            # This is where your configuration files are located
            {% endif -%}
            WorkingDir = "${package}";
            
            {% if comments -%}
            # Volumes for persisting state and credentials
            # Volumes = {
            #   "/terraform-state" = {};
            #   "/credentials" = {};
            # };
            {% endif -%}
          };
        };
        {% endif -%}

      in
      {
        {% if dev -%}
        {% if comments -%}
        # Development shell with infrastructure tools
        # This provides a comprehensive environment for infrastructure development
        {% endif -%}
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Core infrastructure tools
            tfTool # The selected Terraform implementation (terraform or opentofu)
            
            {% if comments -%}
            # Terraform/OpenTofu enhancement tools
            {% endif -%}
            terraform-docs # Generate documentation from Terraform modules
            terraform-ls # Language server for IDE integration
            tflint # Linter for Terraform
            infracost # Cost estimates for Terraform
            
            {% if comments -%}
            # Infrastructure validation and testing tools
            {% endif -%}
            tfsec # Security scanner for Terraform
            terrascan # Security and compliance scanner
            
            {% if comments -%}
            # State and configuration management tools
            {% endif -%}
            terrafrom-inventory # Terraform state inspection
            terragrunt # Terraform wrapper for DRY configurations
            
            # Nix tools
            nil # Nix Language Server
            nixfmt-rfc-style # Nix formatter
            
            {% if comments -%}
            # Version control tools
            # pre-commit # Pre-commit hooks
            # git # Version control
            {% endif -%}
          ] ++ cloudCLIs; # Add the selected cloud provider CLIs
          
          {% if comments -%}
          # Shell hook to set up the environment
          # shellHook = ''
          #   # Create aliases for common commands
          #   alias tf='${tfProvider}'
          #   alias tfi='${tfProvider} init'
          #   alias tfp='${tfProvider} plan'
          #   alias tfa='${tfProvider} apply'
          #   
          #   # Set environment variables
          #   export TF_CLI_ARGS_plan="--parallelism=30"
          #   export TF_CLI_ARGS_apply="--parallelism=30"
          #   
          #   # Check if credentials are available
          #   if [ -f ~/.aws/credentials ]; then
          #     echo "AWS credentials found"
          #   else
          #     echo "WARNING: AWS credentials not found"
          #   fi
          #   
          #   echo "${tfProvider} $(${tfTool}/bin/${tfProvider} version | head -n1)"
          # '';
          {% endif -%}
        };
        {% endif -%}

        {% if package -%}
        packages.default = package;
        {% endif -%}

        {% if docker_image -%}
        packages.dockerImage = dockerImage;
        apps.docker-build-and-load = flake-utils.lib.mkApp {
          drv = pkgs.writeScript "docker-build-and-load" ''
            #!/bin/sh
            set -euo pipefail
            echo "Building and loading Docker image..."
            nix build .#dockerImage
            docker load < result
            echo "Docker image '${tfProvider}-runner:${version}' loaded."
          '';
        };
        {% endif -%}
      }
    );
}
