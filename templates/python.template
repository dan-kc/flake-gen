{% set is_empty = comments or package or comments or docker_image -%}
{% if comments -%}
# List the dependencies for your flake
# to update the dependencies run `nix flake update`
{% endif -%}
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    {% if comments -%}
    # Optional: Add poetry2nix for better Poetry project support
    # poetry2nix = {
    #   url = "github:nix-community/poetry2nix";
    #   inputs.nixpkgs.follows = "nixpkgs";
    # };
    {% endif -%}
  };
  outputs =
    {
      nixpkgs,
      flake-utils,
      {% if comments -%}
      # poetry2nix,
      {% endif -%}
      ...
    }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
          {% if comments -%}
          # Optional: Add overlays if needed
          # overlays = [ poetry2nix.overlays.default ];
          {% endif -%}
        };
        {% if package or docker_image -%}
        pname = "python-app"; # Default package name
        version = "0.1.0"; # Default version
        src = ./.; # Assume project source is in the flake root
        
        {% if comments -%}
        # Define Python dependencies
        # This creates a Python environment with your required packages
        {% endif -%}
        pythonVersion = pkgs.python3; # Default Python version
        pythonEnv = pythonVersion.withPackages (ps: with ps; [
          {% if comments -%}
          # Add your Python project's dependencies here
          # Web frameworks
          # flask
          # fastapi
          # django
          
          # Data processing
          # numpy
          # pandas
          # scipy
          
          # CLI utilities
          # click
          # typer
          
          # Other common libraries
          # requests
          # pillow
          # pyyaml
          {% endif -%}
        ]);
        {% endif -%}

        {% if package -%}
        {% if comments -%}
        # Define your Python application package
        # Choose the appropriate build approach based on your project structure:
        # 1. buildPythonPackage: For traditional setuptools-based projects
        # 2. poetry2nix: For Poetry-based projects
        # 3. stdenv.mkDerivation: For simple scripts or non-package Python applications
        {% endif -%}
        
        {% if comments -%}
        # Option 1: Standard Python package with setup.py or pyproject.toml
        {% endif -%}
        package = pkgs.python3Packages.buildPythonPackage {
          inherit pname version src;
          
          {% if comments -%}
          # Specify the format of your Python package
          # format = "setuptools"; # Default, alternatives: "pyproject", "flit", "wheel"
          
          # Propagated build inputs (runtime dependencies)
          # propagatedBuildInputs = with pkgs.python3Packages; [
          #   flask
          #   requests
          # ];
          
          # Build inputs (build-time dependencies)
          # buildInputs = with pkgs.python3Packages; [
          #   pytest
          # ];
          
          # Native build inputs (build tools)
          # nativeBuildInputs = with pkgs; [
          #   python3Packages.pip
          # ];
          
          # Disable tests if they're causing issues
          # doCheck = false;
          
          # Environment variables for the build
          # PYTHONPATH = "./";
          {% endif -%}
        };
        
        {% if comments -%}
        # Option 2: For Poetry projects (uncomment if using poetry2nix)
        # package = pkgs.poetry2nix.mkPoetryApplication {
        #   inherit pname version src;
        #   
        #   # Specify Python version if needed
        #   python = pythonVersion;
        #   
        #   # Overrides for dependencies that need special handling
        #   # overrides = pkgs.poetry2nix.overrides.withDefaults (final: prev: {
        #   #   some-package = prev.some-package.overridePythonAttrs (old: {
        #   #     buildInputs = (old.buildInputs or [ ]) ++ [ final.setuptools ];
        #   #   });
        #   # });
        # };
        
        # Option 3: For simple Python applications without packaging
        # package = pkgs.stdenv.mkDerivation {
        #   inherit pname version src;
        #   
        #   buildInputs = [ pythonEnv ];
        #   
        #   installPhase = ''
        #     mkdir -p $out/bin
        #     mkdir -p $out/lib/python
        #     
        #     # Copy Python source files
        #     cp -r $src/* $out/lib/python/
        #     
        #     # Create wrapper script
        #     cat > $out/bin/${pname} << EOF
        #     #!/bin/sh
        #     exec ${pythonEnv}/bin/python $out/lib/python/main.py "\$@"
        #     EOF
        #     
        #     chmod +x $out/bin/${pname}
        #   '';
        # };
        {% endif -%}
        {% endif -%}

        {% if docker_image -%}
        {% if comments -%}
        # Define the Docker image for your Python application
        # This creates a container with your Python app and its dependencies
        {% endif -%}
        dockerImage = pkgs.dockerTools.buildLayeredImage {
          name = pname;
          tag = version;

          {% if comments -%}
          # Contents of the image
          # This includes your Python environment, application code, and any other files
          {% endif -%}
          contents = [
            {% if package -%}
            package # Include your built Python package
            {% else -%}
            pythonEnv # Include the Python environment with dependencies
            {% endif -%}
            {% if comments -%}
            # Additional runtime dependencies
            # pkgs.bash # For shell scripts
            # pkgs.coreutils # For basic Linux utilities
            # pkgs.curl # For HTTP requests
            
            # Add project files if not already included in the package
            # src
            {% endif -%}
          ];

          {% if comments -%}
          # The entrypoint for your Docker container
          # This depends on how your Python application is structured
          {% endif -%}
          entrypoint = [ 
            {% if package -%}
            "${package}/bin/${pname}" # If your package installs an executable
            {% else -%}
            "${pythonEnv}/bin/python" # If running a Python script directly
            "${src}/main.py" # The main script to run
            {% endif -%}
          ];

          {% if comments -%}
          # Configuration for the container
          {% endif -%}
          config = {
            {% if comments -%}
            # Environment variables
            {% endif -%}
            Env = [ 
              {% if comments -%}
              # "PYTHONUNBUFFERED=1" # Ensure Python output is sent directly to the container logs
              # "PYTHON_ENV=production"
              {% endif -%}
            ];
            
            {% if comments -%}
            # Exposed ports - common for web services
            {% endif -%}
            ExposedPorts = { 
              {% if comments -%}
              # "8000/tcp" = {}; # FastAPI/Uvicorn default
              # "5000/tcp" = {}; # Flask default
              # "8080/tcp" = {}; # General web service
              {% endif -%}
            };
            
            {% if comments -%}
            # Working directory inside the container
            {% endif -%}
            WorkingDir = "/";
            
            {% if comments -%}
            # User to run as (for security, avoid running as root)
            # User = "nobody";
            {% endif -%}
          };
        };
        {% endif -%}
      in
      {
        {% if dev -%}
        {% if comments -%}
        # Development shell with Python tools
        # This provides a comprehensive environment for Python development
        {% endif -%}
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            # Python and core tools
            pythonVersion
            pythonVersion.pkgs.pip
            pythonVersion.pkgs.setuptools
            pythonVersion.pkgs.wheel
            
            # Virtual environment tools
            pythonVersion.pkgs.virtualenv
            python-lsp-server # Language server for IDE integration
            
            # Code quality and formatting tools
            black # Code formatter
            isort # Import formatter
            pylint # Linter
            mypy # Type checker
            pythonVersion.pkgs.pytest # Testing framework
            
            # Dependency management
            poetry # Dependency management (alternative to pip/requirements.txt)
            
            # Nix tools
            nil # Nix Language Server
            nixfmt-rfc-style # Nix formatter
            
            {% if comments -%}
            # Optional tools based on your workflow
            # pre-commit # Pre-commit hooks for git
            # bandit # Security linter
            # flake8 # Style guide enforcement
            {% endif -%}
          ];
          
          {% if comments -%}
          # Shell hook to set up the environment
          # shellHook = ''
          #   # Create a virtual environment if it doesn't exist
          #   if [ ! -d .venv ]; then
          #     echo "Creating virtual environment..."
          #     virtualenv .venv
          #   fi
          #   
          #   # Activate the virtual environment
          #   source .venv/bin/activate
          #   
          #   # Set environment variables
          #   export PYTHONPATH="$PWD:$PYTHONPATH"
          # '';
          {% endif -%}
        };
        {% endif -%}

        {% if package -%}
        packages.default = package;
        {% endif -%}

        {% if docker_image -%}
        packages.dockerImage = dockerImage;
        apps.docker-build-and-load = flake-utils.lib.mkApp {
          drv = pkgs.writeScript "docker-build-and-load" ''
            #!/bin/sh
            set -euo pipefail
            echo "Building and loading Docker image..."
            nix build .#dockerImage
            docker load < result
            echo "Docker image '${pname}:${version}' loaded."
          '';
        };
        {% endif -%}
      }
    );
}
